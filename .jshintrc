//Examples: https://github.com/jshint/jshint/blob/master/examples/.jshintrc
//Documentation: http://www.jshint.com/docs/
//In Sublime: https://github.com/victorporof/Sublime-JSHint#using-your-own-jshintrc-options

{
	// Custom globals.
	"globals" : {
		"console" : false,

		// Added the below for browser for component(1) compatibility
		"require" : false,
		"module"  : false,
		"exports" : false
	},

	// Settings
	"passfail"      : false,  // Stop on first error.
	"maxerr"        : 100,    // Maximum error before stopping.

	// Predefined globals whom JSHint will ignore.
	"browser"       : true,   // Standard browser globals e.g. `window`, `document`.

	"node"          : false,
	"rhino"         : false,
	"couch"         : false,
	"wsh"           : false,   // Windows Scripting Host.

	"jquery"        : false,
	"prototypejs"   : false,
	"mootools"      : false,
	"dojo"          : false,

	// Development.
	"debug"         : false,  // Allow debugger statements e.g. browser breakpoints.
	"devel"         : false,  // Allow developments statements e.g. `console.log();`.


	// ECMAScript 5.
	//NB: For client code we enable strict mode once at the top of the built concatenated script.
	"strict"        : false,  // Require `use strict` pragma  in every file.
	"globalstrict"  : true,   // Allow global "use strict" (also enables 'strict').


	// The Good Parts.
	"asi"           : false,  // Tolerate Automatic Semicolon Insertion (no semicolons).
	"laxbreak"      : true,   // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
	"bitwise"       : false,  // Prohibit bitwise operators (&, |, ^, etc.).
	"boss"          : false,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
	"curly"         : false,  // Require {} for every new block or scope.
	"eqeqeq"        : true,   // Require triple equals i.e. `===`.
	"eqnull"        : false,  // Tolerate use of `== null`.
	"evil"          : false,  // Tolerate use of `eval`.
	"expr"          : false,  // Tolerate `ExpressionStatement` as Programs.
	"forin"         : false,  // Tolerate `for in` loops without `hasOwnPrototype`.
	"immed"         : true,   // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
	"latedef"       : true,   // Prohipit variable use before definition.
	"loopfunc"      : false,  // Allow functions to be defined within loops.
	"noarg"         : true,   // Prohibit use of `arguments.caller` and `arguments.callee`.
	"regexp"        : false,  // Prohibit `.` and `[^...]` in regular expressions.
	"regexdash"     : false,  // Tolerate unescaped last dash i.e. `[-...]`.
	"scripturl"     : false,  // Tolerate script-targeted URLs.
	"shadow"        : false,  // Allows re-define variables later in code e.g. `var x=1; x=2;`.
	"supernew"      : false,  // Tolerate `new function () { ... };` and `new Object;`.
	"undef"         : true,   // Require all non-global variables be declared before they are used.
	"camelcase"     : true,   // require camelCase or ALL_CAPS
	"unused"        : true,   // prohibit unused variables
	"-W100"         : true,   // if unsafe characters should not be checked

	//
	"maxparams"     : 7,
	"maxdepth"      : 5,
	"maxstatements" : 80,
	"maxcomplexity" : 30,

	// Personal styling preferences.
	"newcap"        : true,   // Require capitalization of all constructor functions e.g. `new F()`.
	"noempty"       : true,   // Prohibit use of empty blocks.
	"nonew"         : true,   // Prohibit use of constructors for side-effects.
	"nomen"         : false,  // Prohibit use of initial or trailing underbars in names.
	"onevar"        : false,  // Allow only one `var` statement per function.
	"plusplus"      : false,  // Prohibit use of `++` & `--`.
	"sub"           : false,  // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
	"trailing"      : true,   // Prohibit trailing whitespaces.
	"white"         : true,   // Check against strict whitespace and indentation rules.
	"indent"        : 4,  // Specify indentation spacing (also shouts on case X: return n, and {x:1, y:2})
	"quotmark"      : false,  // Quotation mark consistency:
	//   false    : do nothing (default)
	//   true     : ensure whatever is used is consistent
	//   "single" : require single quotes
	//   "double" : require double quotes
	"smarttabs"     : true    // true: Tolerate mixed tabs/spaces when used for alignment
}